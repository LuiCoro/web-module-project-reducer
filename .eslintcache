[{"E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\index.js":"1","E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\App.js":"2","E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\reportWebVitals.js":"3","E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\components\\CalcButton.js":"4","E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\components\\TotalDisplay.js":"5","E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\reducers\\index.js":"6","E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\actions\\index.js":"7"},{"size":517,"mtime":1631682370000,"results":"8","hashOfConfig":"9"},{"size":3730,"mtime":1631757214000,"results":"10","hashOfConfig":"9"},{"size":375,"mtime":1631682370000,"results":"11","hashOfConfig":"9"},{"size":296,"mtime":1631682370000,"results":"12","hashOfConfig":"9"},{"size":440,"mtime":1631682370000,"results":"13","hashOfConfig":"9"},{"size":1347,"mtime":1631757080000,"results":"14","hashOfConfig":"9"},{"size":798,"mtime":1631757306000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"408s9t",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\index.js",[],["33","34"],"E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\App.js",["35","36","37"],"import React, {useReducer} from 'react';\r\n\r\nimport './App.css';\r\n\r\nimport TotalDisplay from './components/TotalDisplay';\r\nimport CalcButton from './components/CalcButton';\r\n\r\n//My Imports\r\nimport reducer, {initialState} from './reducers'\r\nimport {addOne, applyNumber, changeOperation , clearDisplay , setMemory , addMemory} from \"./actions\";\r\n\r\nfunction App() {\r\n  \r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  \r\n  // const handleClick = (e) => {\r\n  //   dispatch(addOne(e.target.value))\r\n  // }\r\n  \r\n  const handleClick = (number) => {\r\n    dispatch(applyNumber(number))\r\n  }\r\n  \r\n  const operation = (operation) => {\r\n    dispatch(changeOperation(operation))\r\n  }\r\n  \r\n  const clear = () => {\r\n    dispatch(clearDisplay())\r\n  }\r\n  const memory = () => {\r\n    dispatch(setMemory(state.total))\r\n  }\r\n  \r\n  const inputMemory = () => {\r\n    dispatch(addMemory(state.memory))\r\n  }\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n        <a className=\"navbar-brand\" href=\"#\"><img width=\"40px\" src=\"./Lambda-Logo-Red.png\"/> Lambda Reducer\r\n          Challenge</a>\r\n      </nav>\r\n      \r\n      <div className=\"container row mt-5\">\r\n        <div className=\"col-md-12 d-flex justify-content-center\">\r\n          <form name=\"Cal\">\r\n            \r\n            <TotalDisplay value={state.total}/>\r\n            <div className=\"row details\">\r\n              <span id=\"operation\"><b>Operation:</b> {state.operation}</span>\r\n              <span id=\"memory\"><b>Memory:</b> {state.memory}</span>\r\n            </div>\r\n            \r\n            <div className=\"row\">\r\n              <CalcButton value={\"M+\"} onClick={() => {\r\n                memory();\r\n              }}/>\r\n              <CalcButton value={\"MR\"} onClick={() => {\r\n                inputMemory()\r\n              }}/>\r\n              <CalcButton value={\"MC\"}/>\r\n            </div>\r\n            \r\n            <div className=\"row\">\r\n              <CalcButton value={1} onClick={() => {\r\n                handleClick(1)\r\n              }}/>\r\n              <CalcButton value={2} onClick={() => {\r\n                handleClick(2)\r\n              }}/>\r\n              <CalcButton value={3} onClick={() => {\r\n                handleClick(3)\r\n              }}/>\r\n            </div>\r\n            \r\n            <div className=\"row\">\r\n              <CalcButton value={4} onClick={() => {\r\n                handleClick(4)\r\n              }}/>\r\n              <CalcButton value={5} onClick={() => {\r\n                handleClick(5)\r\n              }}/>\r\n              <CalcButton value={6} onClick={() => {\r\n                handleClick(6)\r\n              }}/>\r\n            </div>\r\n            \r\n            <div className=\"row\">\r\n              <CalcButton value={7} onClick={() => {\r\n                handleClick(7)\r\n              }}/>\r\n              <CalcButton value={8} onClick={() => {\r\n                handleClick(8)\r\n              }}/>\r\n              <CalcButton value={9} onClick={() => {\r\n                handleClick(9)\r\n              }}/>\r\n            </div>\r\n            \r\n            <div className=\"row\">\r\n              <CalcButton value={\"+\"} onClick={() => {\r\n                operation('+')\r\n              }}/>\r\n              <CalcButton value={\"*\"} onClick={() => {\r\n                operation('*')\r\n              }}/>\r\n              <CalcButton value={\"-\"} onClick={() => {\r\n                operation('-')\r\n              }}/>\r\n            </div>\r\n            \r\n            <div className=\"row ce_button\">\r\n              <CalcButton value={\"CE\"} onClick={() => {\r\n                clear()\r\n              }}/>\r\n            </div>\r\n          \r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\reportWebVitals.js",[],"E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\components\\CalcButton.js",[],"E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\components\\TotalDisplay.js",[],"E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\reducers\\index.js",["38"],"import {ADD_ONE, APPLY_NUMBER, CHANGE_OPERATION, CLEAR_DISPLAY , SET_MEMORY , ADD_MEMORY} from './../actions';\r\n\r\n\r\n// Step 1 take the inital state into app js plus our reducer()\r\nexport const initialState = {\r\n  total: 0,\r\n  operation: \"+\",\r\n  memory: 0\r\n}\r\n\r\nconst calculateResult = (num1, num2, operation) => {\r\n  switch (operation) {\r\n    case(\"+\"):\r\n      return num1 + num2;\r\n    case(\"*\"):\r\n      return num1 * num2;\r\n    case(\"-\"):\r\n      return num1 - num2;\r\n  }\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case(ADD_ONE):\r\n      return ({\r\n        ...state,\r\n        total: state.total + 1\r\n      });\r\n    \r\n    case(APPLY_NUMBER):\r\n      return ({\r\n        ...state,\r\n        total: calculateResult(state.total, action.payload, state.operation)\r\n      });\r\n    \r\n    case(CHANGE_OPERATION):\r\n      return ({\r\n        ...state,\r\n        operation: action.payload\r\n      });\r\n      \r\n    case(CLEAR_DISPLAY):\r\n      return({\r\n        ...state,\r\n        total: 0\r\n      })\r\n    \r\n    case(SET_MEMORY):\r\n      return ({\r\n        ...state,\r\n        memory: action.payload\r\n      })\r\n    \r\n    case(ADD_MEMORY):\r\n      return ({\r\n        ...state,\r\n        total: calculateResult(state.total, action.payload, state.operation)\r\n      })\r\n      \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;","E:\\Lambda School Work\\Lambda Unit 3\\Projects\\Unit 3.2\\web-module-project-reducer\\src\\actions\\index.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":10,"column":9,"nodeType":"45","messageId":"46","endLine":10,"endColumn":15},{"ruleId":"47","severity":1,"message":"48","line":42,"column":9,"nodeType":"49","endLine":42,"endColumn":46},{"ruleId":"50","severity":1,"message":"51","line":42,"column":46,"nodeType":"49","endLine":42,"endColumn":93},{"ruleId":"52","severity":1,"message":"53","line":12,"column":3,"nodeType":"54","messageId":"55","endLine":19,"endColumn":4},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'addOne' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]